(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{440:function(t,s,a){"use strict";a.r(s);var n=a(28),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git清除缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git清除缓存"}},[t._v("#")]),t._v(" git清除缓存")]),t._v(" "),a("h2",{attrs:{id:"操作方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作方法"}},[t._v("#")]),t._v(" 操作方法")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -r --cached "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'update .gitignore'")]),t._v("\n")])])]),a("p",[t._v("读了下git文档，才发现，这些东西其实很简单，很容易理解。cached其实就是暂存区，然后一个是工作的目录，你的工作目录的东西做出修改时，会和缓存区进行对比，因此你git status时，会显示出来这个差异，因此为了使.gitignore中的内容生效，那么就删除掉暂存区，然后将所有本地文件追踪一下，就得到最新的暂存区文件。")])])}),[],!1,null,null,null);s.default=e.exports}}]);